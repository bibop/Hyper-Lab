{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "save_file",
                    "modify_file",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "save_file": {
                  "type": "object",
                  "description": "A file that needs to be created or file that needs to be completely replaced. This should be used for new files.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be created or replaced."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file (with the file name) that needs to be created or replaced."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. Remember, you MUST NOT omit any of the content that should go into this file."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "modify_file": {
                  "type": "object",
                  "description": "A file that should be modified. This should only be used for existing files.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the existing file that needs to be updated."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be updated."
                    },
                    "code_change_description": {
                      "type": "string",
                      "description": "Detailed description, with code snippets and any relevant context/explanation, of the changes that the developer should do."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "code_change_description"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "command",
        "command": {
          "command": "npm install @tensorflow/tfjs @tensorflow/tfjs-node",
          "timeout": 60000
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": "ragService.js",
          "path": "/services/ragService.js",
          "content": "const tf = require('@tensorflow/tfjs');\nrequire('@tensorflow/tfjs-node');\n\nclass RagService {\n    constructor() {\n        this.model = this.createModel();\n    }\n\n    createModel() {\n        const model = tf.sequential();\n        model.add(tf.layers.dense({units: 10, inputShape: [10], activation: 'relu'}));\n        model.add(tf.layers.dense({units: 10, activation: 'softmax'}));\n        model.compile({optimizer: 'adam', loss: 'categoricalCrossentropy', metrics: ['accuracy']});\n        return model;\n    }\n\n    async trainModel(inputs, labels) {\n        await this.model.fit(inputs, labels, {\n            epochs: 10,\n            batchSize: 32,\n        });\n    }\n\n    predict(input) {\n        return this.model.predict(input);\n    }\n}\n\nmodule.exports = new RagService();"
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "Agent.js",
          "path": "/models/Agent.js",
          "code_change_description": "Add a memory schema to the Agent model.\n\nBelow the line:\nconst { VALID_ROLES } = require('../utils/agentRoles');\n\nAdd:\n\nconst AgentMemorySchema = new Schema({\n  inputs: [],\n  outputs: []\n}, { _id: false });\n\nThen, in the AgentSchema, add a new field for 'memory':\n\nmemory: {\n  type: AgentMemorySchema,\n  required: true,\n  default: () => ({})\n}\n"
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": "agentController.js",
          "path": "/controllers/agentController.js",
          "content": "const Agent = require('../models/Agent');\nconst RagService = require('../services/ragService');\n\nexports.retrainAgent = async (req, res) => {\n  const agentId = req.params.agentId;\n  try {\n    const agent = await Agent.findById(agentId);\n    if (!agent) return res.status(404).json({ message: 'Agent not found' });\n\n    const inputs = tf.tensor(agent.memory.inputs);\n    const labels = tf.tensor(agent.memory.outputs);\n\n    await RagService.trainModel(inputs, labels);\n\n    res.json({ message: 'Agent retrained successfully' });\n  } catch (error) {\n    console.error('Error retraining agent:', error);\n    res.status(500).json({ message: 'Error retraining agent', error });\n  }\n};"
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": "agentRoutes.js",
          "path": "/routes/agentRoutes.js",
          "content": "const express = require('express');\nconst router = express.Router();\nconst agentController = require('../controllers/agentController');\nconst jwtAuthMiddleware = require('../middleware/jwtAuthMiddleware');\n\nrouter.post('/:agentId/retrain', jwtAuthMiddleware, agentController.retrainAgent);\n\nmodule.exports = router;"
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "index.js",
          "path": "/routes/index.js",
          "code_change_description": "Import and use the new agentRoutes within the central routing module.\n\nAt the bottom of the requires at the top of the file add:\nconst agentRoutes = require('./agentRoutes');\n\nThen, within the exported function, add the following line to attach agentRoutes to the app:\napp.use('/agents', agentRoutes);"
        }
      }
    ]
  }
}