{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "save_file",
                    "modify_file",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "save_file": {
                  "type": "object",
                  "description": "A file that needs to be created or file that needs to be completely replaced. This should be used for new files.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be created or replaced."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file (with the file name) that needs to be created or replaced."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. Remember, you MUST NOT omit any of the content that should go into this file."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "modify_file": {
                  "type": "object",
                  "description": "A file that should be modified. This should only be used for existing files.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the existing file that needs to be updated."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be updated."
                    },
                    "code_change_description": {
                      "type": "string",
                      "description": "Detailed description, with code snippets and any relevant context/explanation, of the changes that the developer should do."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "code_change_description"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "save_file",
        "save_file": {
          "name": "AgentService.js",
          "path": "/services/AgentService.js",
          "content": "const Agent = require('../models/Agent');\nconst { VALID_ROLES } = require('../utils/agentRoles');\n\nclass AgentService {\n  async createAgent(projectId, name, role) {\n    let agent = new Agent({ projectId, name, role });\n    agent = await agent.save();\n    return agent;\n  }\n  \n  async createDefaultAgents(projectId, roles) {\n    if (roles.length > VALID_ROLES.length) {\n      throw new Error('Attempting to create more agents than valid roles.');\n    }\n  \n    const agents = [];\n    for (const role of roles) {\n      const agentExists = await Agent.exists({ projectId, role });\n      if (!agentExists) {\n        const name = `Agent ${role.charAt(0).toUpperCase() + role.slice(1)}`; // Basic formatting for agent name\n        const agent = await this.createAgent(projectId, name, role);\n        agents.push(agent);\n      }\n    }\n    return agents;\n  }\n}\n\nmodule.exports = new AgentService();"
        }
      },
      {
        "type": "command",
        "command": {
          "command": "npm install concurrently --save-dev",
          "timeout": 60000
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "package.json",
          "path": "/package.json",
          "code_change_description": "Update scripts for starting client and server concurrently.\nReplace existing scripts with:\n\"scripts\": {\n  \"start\": \"node index.js\",\n  \"client\": \"cd client && npm start\",\n  \"dev\": \"concurrently \\\"npm start\\\" \\\"npm run client\\\"\"\n}\nAlso, make sure to install concurrently by running `npm install concurrently --save-dev`."
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": "trainAgentController.js",
          "path": "/controllers/trainAgentController.js",
          "content": "const Agent = require('../models/Agent');\nconst RagService = require('../services/ragService');\n\nexports.trainAgent = async (req, res) => {\n  const agentId = req.params.agentId;\n  const { inputs, outputs } = req.body;\n  \n  try {\n    const agent = await Agent.findById(agentId);\n    if (!agent) return res.status(404).json({ message: 'Agent not found' });\n    agent.memory.inputs.push(inputs);\n    agent.memory.outputs.push(outputs);\n    await agent.save();\n    await RagService.train(agent.memory.inputs, agent.memory.outputs);\n    res.status(200).json({ message: 'Agent trained successfully', agent });\n  } catch (error) {\n    console.error('Error training agent:', error);\n    res.status(500).json({ message: 'Error training agent', error });\n  }\n};\n"
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": "predictAgentController.js",
          "path": "/controllers/predictAgentController.js",
          "content": "const Agent = require('../models/Agent');\nconst RagService = require('../services/ragService');\n\nexports.predictWithAgent = async (req, res) => {\n  const agentId = req.params.agentId;\n  const { input } = req.body;\n  \n  try {\n    const agent = await Agent.findById(agentId);\n    if (!agent) return res.status(404).json({ message: 'Agent not found' });\n    const prediction = RagService.predict(input);\n    res.status(200).json({ prediction });\n  } catch (error) {\n    console.error('Error predicting with agent:', error);\n    res.status(500).json({ message: 'Error predicting with agent', error });\n  }\n};\n"
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "agentRoutes.js",
          "path": "/routes/agentRoutes.js",
          "code_change_description": "Replace agent controller imports with two new controller files and modify the routes to use these controllers.\nReplace existing agent controller imports and route handlers with:\nconst express = require('express');\nconst router = express.Router();\nconst uploadAgentImageController = require('../controllers/uploadAgentImageController');\nconst trainAgentController = require('../controllers/trainAgentController');\nconst predictAgentController = require('../controllers/predictAgentController');\nconst jwtAuthMiddleware = require('../middleware/jwtAuthMiddleware');\n\nrouter.post('/:agentId/train', jwtAuthMiddleware, trainAgentController.trainAgent);\nrouter.post('/:agentId/predict', jwtAuthMiddleware, predictAgentController.predictWithAgent);\nrouter.post('/:agentId/image-upload', jwtAuthMiddleware, uploadAgentImageController.uploadImage);\n\nmodule.exports = router;\n"
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": "uploadAgentImageController.js",
          "path": "/controllers/uploadAgentImageController.js",
          "content": "const Agent = require('../models/Agent');\nconst sharp = require('sharp');\n\nexports.uploadImage = async (req, res) => {\n  try {\n    const agent = await Agent.findById(req.params.agentId);\n    if (!agent) {\n      return res.status(404).json({ msg: 'Agent not found' });\n    }\n    const processedImageBuffer = await sharp(req.file.buffer).resize(300, 300).png().toBuffer();\n    const imageName = `agent-${agent.id}.png`;\n    const imagePath = `/images/${imageName}`;\n    \n    // Store the processedImageBuffer to your storage system here, and save the path in the Agent model.\n    \n    res.status(200).json({ msg: 'Image uploaded successfully', imagePath });\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server error');\n  }\n};"
        }
      }
    ]
  }
}