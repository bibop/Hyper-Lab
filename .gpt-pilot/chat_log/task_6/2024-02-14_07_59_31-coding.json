{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "save_file",
                    "modify_file",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "save_file": {
                  "type": "object",
                  "description": "A file that needs to be created or file that needs to be completely replaced. This should be used for new files.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be created or replaced."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file (with the file name) that needs to be created or replaced."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. Remember, you MUST NOT omit any of the content that should go into this file."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "modify_file": {
                  "type": "object",
                  "description": "A file that should be modified. This should only be used for existing files.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the existing file that needs to be updated."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be updated."
                    },
                    "code_change_description": {
                      "type": "string",
                      "description": "Detailed description, with code snippets and any relevant context/explanation, of the changes that the developer should do."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "code_change_description"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "modify_file",
        "modify_file": {
          "name": "package.json",
          "path": "/package.json",
          "code_change_description": "Add a missing comma at the end of the `devDependencies` section to fix the JSON syntax error.\n\nCorrected `devDependencies` section:\n```\n\"devDependencies\": {\n  \"concurrently\": \"^8.2.2\"\n}\n```"
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": "generateAgentImageController.js",
          "path": "/controllers/generateAgentImageController.js",
          "content": "const sharp = require('sharp');\nconst fs = require('fs');\nconst path = require('path');\n\nexports.generateImage = async (req, res) => {\n  try {\n    const { agentId } = req.params;\n    const imageBuffer = await sharp({\n      create: {\n        width: 300,\n        height: 300,\n        channels: 4,\n        background: { r: 255, g: 255, b: 255, alpha: 0.5 }\n      }\n    }).png().toBuffer();\n\n    if (!fs.existsSync(path.join(__dirname, '..', 'public', 'images'))) {\n      fs.mkdirSync(path.join(__dirname, '..', 'public', 'images'), { recursive: true });\n    }\n\n    const imageName = `agent-${agentId}.png`;\n    const imagePath = `/images/${imageName}`;\n\n    fs.writeFileSync(path.join(__dirname, '..', 'public', imagePath), imageBuffer);\n\n    res.status(200).json({ message: 'Image generated successfully', imagePath });\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server error');\n  }\n};\n"
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "agentRoutes.js",
          "path": "/routes/agentRoutes.js",
          "code_change_description": "Add a new route for image generation in `agentRoutes.js`:\n\nAdd the following line after the existing route declarations:\n```\nconst generateAgentImageController = require('../controllers/generateAgentImageController');\n```\n\nAnd add the new route:\n```\n// Add this new route for image generation\nrouter.post('/:agentId/generate-image', jwtAuthMiddleware, generateAgentImageController.generateImage);\n```"
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "AgentImageUpload.js",
          "path": "/client/src/components/AgentImageUpload.js",
          "code_change_description": "Update the `AgentImageUpload` component to handle image generation:\n\nAdd a new button and handler for image generation inside the component's return statement:\n\n```jsx\n<button onClick={onGenerateImage}>Generate Image</button>\n```\n\nAdd a new function `onGenerateImage` above the return statement:\n\n```jsx\nconst onGenerateImage = () => {\n  // Dispatch an action to generate image on the server\n  dispatch(generateAgentImage(agentId)); // Implement this action\n};\n```"
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "agentActions.js",
          "path": "/client/src/actions/agentActions.js",
          "code_change_description": "Create a new action in `agentActions.js` for image generation:\n\nAdd the following function at the end of the `agentActions.js` file:\n\n```javascript\nexport const generateAgentImage = (agentId) => async (dispatch) => {\n  try {\n    const res = await axios.post(`/agents/${agentId}/generate-image`);\n    \n    dispatch({\n      type: 'GENERATE_AGENT_IMAGE',\n      payload: { agentId, imagePath: res.data.imagePath }\n    });\n  } catch (err) {\n    dispatch({\n      type: 'AGENTS_ERROR',\n      payload: err.response.data\n    });\n  }\n};\n```"
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "agentsReducer.js",
          "path": "/client/src/reducers/agentsReducer.js",
          "code_change_description": "Modify the `agentsReducer` to handle the new action for image generation:\n\nAdd a new case statement in the switch block:\n\n```javascript\ncase 'GENERATE_AGENT_IMAGE':\n  return {\n    ...state,\n    agents: state.agents.map(agent => \n      agent._id === action.payload.agentId ? { ...agent, image: action.payload.imagePath } : agent),\n  };\n```"
        }
      }
    ]
  }
}