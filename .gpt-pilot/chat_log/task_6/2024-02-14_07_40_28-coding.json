{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "save_file",
                    "modify_file",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "save_file": {
                  "type": "object",
                  "description": "A file that needs to be created or file that needs to be completely replaced. This should be used for new files.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be created or replaced."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file (with the file name) that needs to be created or replaced."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. Remember, you MUST NOT omit any of the content that should go into this file."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "modify_file": {
                  "type": "object",
                  "description": "A file that should be modified. This should only be used for existing files.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the existing file that needs to be updated."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be updated."
                    },
                    "code_change_description": {
                      "type": "string",
                      "description": "Detailed description, with code snippets and any relevant context/explanation, of the changes that the developer should do."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "code_change_description"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "modify_file",
        "modify_file": {
          "name": "Agent.js",
          "path": "/models/Agent.js",
          "code_change_description": "Remove the duplicated block of code to correct the syntax error. Here's the corrected version of Agent.js:\n\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst { VALID_ROLES } = require('../utils/agentRoles');\n\nconst AgentMemorySchema = new Schema({\n  inputs: {\n    type: [[Number]],\n    default: []\n  },\n  outputs: {\n    type: [[Number]],\n    default: []\n  }\n}, { _id: false });\n\nconst AgentSchema = new Schema({\n  projectId: {\n    type: Schema.Types.ObjectId,\n    ref: 'Project',\n    required: true\n  },\n  name: {\n    type: String,\n    required: true\n  },\n  role: {\n    type: String,\n    enum: VALID_ROLES,\n    required: true\n  },\n  image: {\n    type: String,\n    default: ''\n  },\n  memory: {\n    type: AgentMemorySchema,\n    required: true,\n    default: () => ({})\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n});\n\nconst Agent = mongoose.model('Agent', AgentSchema);\nmodule.exports = Agent;"
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": ".gitignore",
          "path": "/.gitignore",
          "code_change_description": "Append the following lines to ignore the client side node_modules and build directory:\n\n# Client-side node modules\n/client/node_modules\n\n# React build directory\n/client/build\n"
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": "AgentCard.js",
          "path": "/client/src/components/AgentCard.js",
          "content": "import React from 'react';\nimport AgentImageUpload from './AgentImageUpload';\n\nconst AgentCard = ({ agent }) => {\n  return (\n    <div className=\"agent-card\">\n      <h3>{agent.name}</h3>\n      <p>Role: {agent.role}</p>\n      <div>\n        {agent.image ? (\n          <img src={agent.image} alt={agent.name} />\n        ) : (\n          <img src=\"/default-agent.png\" alt=\"Default agent\" />\n        )}\n        <AgentImageUpload agentId={agent._id} />\n      </div>\n    </div>\n  );\n};\n\nexport default AgentCard;"
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": "AgentList.js",
          "path": "/client/src/components/AgentList.js",
          "content": "import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAgents } from '../actions/agentActions';\nimport AgentCard from './AgentCard';\n\nconst AgentList = () => {\n  const dispatch = useDispatch();\n  const { agents } = useSelector(state => state.agents);\n\n  useEffect(() => {\n    dispatch(getAgents());\n  }, [dispatch]);\n\n  return (\n    <div className=\"agent-list\">\n      {agents.map(agent => (\n        <AgentCard key={agent._id} agent={agent} />\n      ))}\n    </div>\n  );\n};\n\nexport default AgentList;"
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "agentsReducer.js",
          "path": "/client/src/reducers/agentsReducer.js",
          "code_change_description": "Update the agentsReducer to handle actions for loading agents, adding images, and handling errors:\n\nconst initialState = {\n  agents: [],\n  loading: false,\n  error: null\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case 'AGENTS_LOADING':\n      return {\n        ...state,\n        loading: true\n      };\n    case 'GET_AGENTS':\n      return {\n        ...state,\n        agents: action.payload,\n        loading: false\n      };\n    case 'UPLOAD_AGENT_IMAGE':\n      return {\n        ...state,\n        agents: state.agents.map(agent => \n          agent._id === action.payload.agentId ? { ...agent, image: action.payload.imagePath } : agent),\n      };\n    case 'AGENTS_ERROR':\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    default:\n      return state;\n  }\n}"
        }
      },
      {
        "type": "command",
        "command": {
          "command": "git add . && git commit -m \"Fixed Agent model and implemented Agent interaction UI\" && git push origin main",
          "timeout": 20000
        }
      },
      {
        "type": "command",
        "command": {
          "command": "cd client && npm install && npm start",
          "timeout": 300000,
          "success_message": "Compiled successfully!"
        }
      }
    ]
  }
}