{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "save_file",
                    "modify_file",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "save_file": {
                  "type": "object",
                  "description": "A file that needs to be created or file that needs to be completely replaced. This should be used for new files.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be created or replaced."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file (with the file name) that needs to be created or replaced."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. Remember, you MUST NOT omit any of the content that should go into this file."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "modify_file": {
                  "type": "object",
                  "description": "A file that should be modified. This should only be used for existing files.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the existing file that needs to be updated."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be updated."
                    },
                    "code_change_description": {
                      "type": "string",
                      "description": "Detailed description, with code snippets and any relevant context/explanation, of the changes that the developer should do."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "code_change_description"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "command",
        "command": {
          "command": "npm install multer sharp",
          "timeout": 60000
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "agentRoutes.js",
          "path": "/routes/agentRoutes.js",
          "code_change_description": "Add new endpoints for uploading and generating agent images.\nImport the following modules at the beginning of the file:\nconst multer = require('multer');\nconst sharp = require('sharp');\n\nAdd the following handler for image uploading:\n\n// Endpoint to upload an image for an agent\nrouter.post('/:agentId/image-upload', jwtAuthMiddleware, upload.single('image'), async (req, res) => {\n  try {\n    const agent = await Agent.findById(req.params.agentId);\n    if (!agent) {\n      return res.status(404).json({ msg: 'Agent not found' });\n    }\n\n    // Use sharp to process and save the image\n    const processedImageBuffer = await sharp(req.file.buffer)\n      .resize(300, 300)\n      .png()\n      .toBuffer();\n\n    // Generate a random name for the image or use a service to store the image\n    // This is a placeholder path for demonstration\n    const imageName = `agent-${agent.id}.png`;\n    const imagePath = `/images/${imageName}`;\n\n    // Here you would store the processedImageBuffer to your storage system\n    // and subsequently store the resulting URL or reference in your Agent model\n\n    res.status(200).json({ msg: 'Image uploaded successfully', imagePath });\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server error');\n  }\n});"
        }
      },
      {
        "type": "command",
        "command": {
          "command": "npx create-react-app client",
          "timeout": 300000
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": "store.js",
          "path": "/client/src/store.js",
          "content": "import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\nconst middleware = [thunk];\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, initialState, composeEnhancers(applyMiddleware(...middleware)));\n\nexport default store;"
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": "index.js",
          "path": "/client/src/reducers/index.js",
          "content": "import { combineReducers } from 'redux';\nimport agentsReducer from './agentsReducer';\n\nexport default combineReducers({\n  agents: agentsReducer\n  // ... you may have other reducers, include them here\n});"
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": "agentsReducer.js",
          "path": "/client/src/reducers/agentsReducer.js",
          "content": "const initialState = {\n  agents: [],\n  loading: false,\n  error: null\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    // Add your case to handle fetched agents, loading states and errors\n    default:\n      return state;\n  }\n}"
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": "agentActions.js",
          "path": "/client/src/actions/agentActions.js",
          "content": "import axios from 'axios';\n\nexport const getAgents = () => async (dispatch) => {\n  try {\n    dispatch({ type: 'AGENTS_LOADING' });\n\n    const res = await axios.get('/api/agents');\n    dispatch({\n      type: 'GET_AGENTS',\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: 'AGENTS_ERROR',\n      payload: err.response.data\n    });\n  }\n};\n\nexport const uploadAgentImage = (agentId, file) => async (dispatch) => {\n  try {\n    const formData = new FormData();\n    formData.append('image', file);\n\n    const res = await axios.post(`/agents/${agentId}/image-upload`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n\n    dispatch({\n      type: 'UPLOAD_AGENT_IMAGE',\n      payload: { agentId, imagePath: res.data.imagePath }\n    });\n  } catch (err) {\n    dispatch({\n      type: 'AGENTS_ERROR',\n      payload: err.response.data\n    });\n  }\n};"
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": "AgentList.js",
          "path": "/client/src/components/AgentList.js",
          "content": "import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAgents } from '../actions/agentActions';\n\nconst AgentList = () => {\n  const dispatch = useDispatch();\n  const { agents } = useSelector(state => state.agents);\n\n  useEffect(() => {\n    dispatch(getAgents());\n  }, [dispatch]);\n\n  return (\n    <div>\n      {agents.map(agent => (\n        <div key={agent._id}>\n          <div>{agent.name}</div>\n          <div>{agent.role}</div>\n          {agent.image && <img src={agent.image} alt='Agent' />}\n          {/* Use AgentImageUpload component here to upload images for agents */}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default AgentList;"
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": "AgentImageUpload.js",
          "path": "/client/src/components/AgentImageUpload.js",
          "content": "import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { uploadAgentImage } from '../actions/agentActions';\n\nconst AgentImageUpload = ({ agentId }) => {\n  const [file, setFile] = useState(null);\n  const dispatch = useDispatch();\n\n  const onUpload = () => {\n    if (file) {\n      dispatch(uploadAgentImage(agentId, file));\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type='file'\n        onChange={e => setFile(e.target.files[0])}\n      />\n      <button onClick={onUpload}>Upload Image</button>\n      {/* Add handler and component state for image generation as needed */}\n    </div>\n  );\n};\n\nexport default AgentImageUpload;"
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": "App.js",
          "path": "/client/src/App.js",
          "content": "import React from 'react';\nimport AgentList from './components/AgentList';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <div className='App'>\n        <AgentList />\n      </div>\n    </Provider>\n  );\n};\n\nexport default App;"
        }
      },
      {
        "type": "command",
        "command": {
          "command": "cd client && npm start",
          "timeout": 30000,
          "success_message": "You can now view client in the browser."
        }
      }
    ]
  }
}