endpoint: OPENAI
model: gpt-4-1106-preview
messages:
- role: system
  content: You are an experienced tech lead in a software development agency and your main task is to break down the project
    into smaller tasks that developers will do. You must specify each task as clear as possible. Each task must have a description
    of what needs to be implemented, a programmatic goal that will determine if a task can be marked as done from a programmatic
    perspective and user-review goal that will determine if a task is done or not but from a user perspective since it will
    be reviewed by a human.
- role: user
  content: 'You are working in a software development agency and a project manager and software architect approach you telling
    you that you''re assigned to work on a new project. You are working on a App called "AI_HyperLab" and you need to create
    a detailed development plan so that developers can start developing the app.


    Here is a high level description of "AI_HyperLab":

    ```

    "Hyper-Lab" is an innovative full-stack web application designed for managing AI projects using an autogen architecture.
    It combines a modern graphical user interface with advanced functionalities tailored for creating and managing specialized
    Autogen Agents.

    Enhanced Key Features and Functionalities:

    * Dynamic Creation of Specialized Autogen Agents: Up to eight agents are dynamically created for each project based on
    user-inputted prompts, including specific roles such as a ''boss'' and a ''critic''.

    * AI-Generated Agent Images: On user request, the software is capable of generating images for each agent, reflecting
    their functions and roles within the project. This visual representation adds a layer of intuitiveness and personalization
    to the user experience.

    * RAG Functionality: Each agent is equipped with Retrievable and Generative capabilities, enabling them to retain memory
    and learn incrementally, improving their performance over time.

    * Persistent and Concurrent Interactions: The platform ensures that interactions between agents are continuous and can
    occur simultaneously across multiple sessions.

    * Graphical User Interface (GUI): The GUI displays each agent in individual text boxes, complete with the agent''s name,
    specialization, and their AI-generated or user-uploaded image.

    * User Authentication and Real-Time Collaboration: Various access levels for enhanced security, along with features supporting
    real-time collaboration on AI projects.

    * Strict Adherence to Autogen Architecture: Exclusively utilizes Autogen architecture without integrating additional AI
    services or frameworks.

    * Responsive and Multilingual Design: The application is mobile-responsive and supports multiple languages, catering to
    a global audience.

    * Performance Metrics and Documentation: While specific performance metrics are yet to be established, the application
    is geared towards efficiency and user-friendliness. A detailed user manual will be provided in English.

    References and Resources for Autogen:

    * Autogen Architecture Overview: Microsoft Autogen Blog

    * Agent AutoBuild Example: Microsoft Autogen Blog - Agent AutoBuild

    * Detailed Articles on Autogen: Available at Microsoft Autogen Blog.


    ```



    Here are the technologies that you need to use for this project:

    ```


    - Node.js


    - Express


    - MongoDB


    - Mongoose


    - jsonwebtoken


    - Passport.js


    - bcryptjs


    - Socket.io


    - React


    - Redux


    - axios


    - Bootstrap


    - HTML


    - CSS3


    - cron


    - i18next


    - TensorFlow.js


    - sharp


    ```




    Before we go into the coding part, I want you to split the development process of creating this app into smaller tasks
    so that it is easier to develop, debug and make the app work. Each smaller task of this app has to be a whole that can
    be reviewed by a developer to make sure we''re on a right track to create this app completely.


    Each task needs to be related only to the development of this app and nothing else - once the app is fully working, that
    is it. There shouldn''t be a task for researching, deployment, writing documentation, or anything that is not writing
    the actual code.


    Now, based on the project details provided, think task by task and create the entire development plan. Start from the
    project setup and specify each task until the moment when the entire app should be fully working.


    **IMPORTANT**

    Dividing project into tasks is extremely important job and has to be done carefully while always strictly following all
    rules listed bellow.


    Rule #1

    There should never be a task that is only testing or ensuring something works, every task must have coding involved. Have
    this in mind for every task, but it is extremely important for last task of project. Testing if app works will be done
    as part of each task.


    Rule #2

    You have to make sure the project is not split into tasks that are too small or simple for no reason but also not too
    big or complex so that they are hard to develop, debug and review. Here are examples of poorly created tasks:


    **too simple tasks**

    - Set up a Node.js project and install all necessary dependencies.

    - Establish a MongoDB database connection using Mongoose with the IP ''127.0.0.1''.


    **too complex tasks**

    - Set up Node.js project with /home, /profile, /register and /login routes that will have user authentication, connection
    to MongoDB with user schemas, mailing of new users and frontend with nice design.


    You must to avoid creating tasks that are too simple or too complex. You have to aim to create tasks that are medium complexity.
    Here are examples of tasks that are good:


    **good tasks**

    - Set up a Node.js project, install all necessary dependencies and set up an express server with a simple route to `/ping`
    that returns the status 200.

    - Establish a MongoDB database connection and implement the message schema using Mongoose for persistent storage of messages.


    Rule #3

    Every app should have different number of tasks depending on complexity. Think task by task and create the minimum number
    of tasks that are relevant for this specific app. Here are some examples of apps with different complexity that can give
    you guidance on how many tasks you should create:


    Example #1:

    app description: "I want to create an app that will just say ''Hello World'' when I open it on my localhost:3000."

    number of tasks: 1-3


    Example #2:

    app description: "Create a node.js app that enables users to register and log into the app. On frontend it should have
    /home (shows user data), /register and /login. It should use sessions to keep user logged in."

    number of tasks: 2-6


    Example #3:

    app description: "A cool online shoe store, with a sleek look. In terms of data models, there are shoes, categories and
    user profiles. For web pages: product listing, details, shopping cart. It must look cool and jazzy."

    number of tasks: 5-15'
- role: user
  content: "**IMPORTANT**\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\n\nHere is\
    \ the schema for the expected JSON object:\n```json\n{\n    \"plan\": {\n        \"type\": \"array\",\n        \"description\"\
    : \"List of development tasks that need to be done to implement the entire plan.\",\n        \"items\": {\n          \
    \  \"type\": \"object\",\n            \"description\": \"Development task that needs to be done to implement the entire\
    \ plan.\",\n            \"properties\": {\n                \"description\": {\n                    \"type\": \"string\"\
    ,\n                    \"description\": \"Description of the development task that needs to be done to implement the entire\
    \ plan.\"\n                },\n                \"programmatic_goal\": {\n                    \"type\": \"string\",\n \
    \                   \"description\": \"Detailed description of programmatic goal. Programmatic goal that will determine\
    \ if a task can be marked as done from a programmatic perspective (this will result in an automated test that is run before\
    \ the task is sent to you for a review). All details previously specified by user that are important for this task must\
    \ be included in this programmatic goal.\"\n                },\n                \"user_review_goal\": {\n            \
    \        \"type\": \"string\",\n                    \"description\": \"User review goal that will determine if a task\
    \ is done or not, but from a user perspective since it will be reviewed by a human.\"\n                }\n           \
    \ },\n            \"required\": [\n                \"description\",\n                \"programmatic_goal\",\n        \
    \        \"user_review_goal\"\n            ]\n        }\n    }\n}\n```\n\n"
response: "```json\n{\n    \"plan\": [\n        {\n            \"description\": \"Initialize the project and set up the server\
  \ environment, install core dependencies including Node.js, Express, and Mongoose, and create a basic express server with\
  \ a `/ping` endpoint.\",\n            \"programmatic_goal\": \"A Node.js project with package.json containing Express and\
  \ Mongoose with an Express server running and responding to GET requests at '/ping' with a 200 status code.\",\n       \
  \     \"user_review_goal\": \"A reviewer can perform a GET request to `/ping` and receive a 200 OK response, confirming\
  \ server setup.\"\n        },\n        {\n            \"description\": \"Set up the MongoDB connection using Mongoose and\
  \ create the initial user schema and model, preparing for authentication and user data storage.\",\n            \"programmatic_goal\"\
  : \"A successful MongoDB connection is established, and a user Mongoose schema and model are in place and can be used to\
  \ create and read user documents.\",\n            \"user_review_goal\": \"The presence of the user schema in the database\
  \ can be verified and a dummy user can be stored and retrieved without errors.\"\n        },\n        {\n            \"\
  description\": \"Implement user authentication system using jsonwebtoken, Passport.js and bcryptjs, including routes for\
  \ registration, login, and a middleware to protect certain routes.\",\n            \"programmatic_goal\": \"User registration\
  \ and login routes are created and secured with jsonwebtoken, Passport.js and hashed passwords using bcryptjs. Authentication\
  \ middleware is usable across different routes.\",\n            \"user_review_goal\": \"A user can register, log in, and\
  \ access protected routes only after successful authentication.\"\n        },\n        {\n            \"description\": \"\
  Develop the autogen agent creation functionality with up to eight agents per project and implement Agent model schemas and\
  \ controllers.\",\n            \"programmatic_goal\": \"Creation of agents is dynamically handled based on user-inputted\
  \ prompts, with a corresponding MongoDB model for persistence, allowing for creation and retrieval of up to eight agents.\"\
  ,\n            \"user_review_goal\": \"Users can create a project with up to eight specialized autogen agents and view their\
  \ details stored in the database.\"\n        },\n        {\n            \"description\": \"Integrate TensorFlow.js for Retrievable\
  \ and Generative (RAG) capabilities of agents, enabling them to retain memory and learn over time.\",\n            \"programmatic_goal\"\
  : \"Agents utilize TensorFlow.js to implement RAG capabilities, allowing them to store and access past interactions and\
  \ evolve based on new data.\",\n            \"user_review_goal\": \"Agents show an ability to learn from past data and interactions\
  \ with improved performance over time.\"\n        },\n        {\n            \"description\": \"Develop the GUI for agent\
  \ interaction using React and Redux, including text boxes for agent representation and the ability to upload or generate\
  \ images for agents using the `sharp` library.\",\n            \"programmatic_goal\": \"A React app with Redux state management\
  \ is created displaying individual text boxes for each agent and their details, with functionality to upload or generate\
  \ images using `sharp`.\",\n            \"user_review_goal\": \"The GUI displays each agent with their names, specializations,\
  \ and images, allowing users to upload or automatically generate images.\"\n        },\n        {\n            \"description\"\
  : \"Implement real-time collaboration features with Socket.io, allowing concurrent interactions and updates among different\
  \ user sessions.\",\n            \"programmatic_goal\": \"Real-time features are enabled using Socket.io for concurrent\
  \ and persistent interactions, ensuring updates are communicated across multiple user sessions.\",\n            \"user_review_goal\"\
  : \"Multiple users can simultaneously interact with the system and see real-time updates of agent interactions.\"\n    \
  \    },\n        {\n            \"description\": \"Add multilingual support and a mobile-responsive design using i18next\
  \ and Bootstrap, ensuring the application caters to a global audience.\",\n            \"programmatic_goal\": \"Integration\
  \ of i18next for translations and Bootstrap for responsive design, with every static text wrapped for translation and the\
  \ app displaying correctly on various screen sizes.\",\n            \"user_review_goal\": \"Users can switch between different\
  \ languages and access the application on mobile devices with an appropriate layout.\"\n        },\n        {\n        \
  \    \"description\": \"Finalize the application by setting up cron jobs for regular performance metric analysis and the\
  \ preparation of a user manual in English.\",\n            \"programmatic_goal\": \"Scheduled cron jobs analyze performance\
  \ metrics at specified intervals, and a user manual document is prepared and accessible in the application.\",\n       \
  \     \"user_review_goal\": \"Performance metrics are regularly recorded and the user manual can be accessed from within\
  \ the application.\"\n        }\n    ]\n}\n```"
