{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "save_file",
                    "modify_file",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "save_file": {
                  "type": "object",
                  "description": "A file that needs to be created or file that needs to be completely replaced. This should be used for new files.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be created or replaced."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file (with the file name) that needs to be created or replaced."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. Remember, you MUST NOT omit any of the content that should go into this file."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "modify_file": {
                  "type": "object",
                  "description": "A file that should be modified. This should only be used for existing files.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the existing file that needs to be updated."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be updated."
                    },
                    "code_change_description": {
                      "type": "string",
                      "description": "Detailed description, with code snippets and any relevant context/explanation, of the changes that the developer should do."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "code_change_description"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "command",
        "command": {
          "command": "npm install dotenv",
          "timeout": 60000
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": ".env",
          "path": "/.env",
          "content": "MONGO_URI=mongodb://localhost:27017/ai_hyperlab\nPORT=3000"
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "index.js",
          "path": "/index.js",
          "code_change_description": "Incorporate the use of dotenv for environment variables and separate the database connection into a module.\n\nAt the top of the file, add:\nrequire('dotenv').config();\n\nReplace the mongoose.connect call with a call to the new connectDB function:\nconnectDB();\n\nAdd this line at the top of the file to include the connectDB function:\nconst connectDB = require('./config/database');"
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "database.js",
          "path": "/config/database.js",
          "code_change_description": "Refactor database.js to use the environment variable for the MongoDB URI and to handle the connection logic as an asynchronous function.\n\nReplace the entire contents of the file with:\nconst mongoose = require('mongoose');\n\nconst connectDB = async () => {\n  try {\n    await mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true });\n    console.log('MongoDB Connected...');\n  } catch (err) {\n    console.error(err.message);\n    process.exit(1);\n  }\n};\n\nmodule.exports = connectDB;"
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": "index.js",
          "path": "/routes/index.js",
          "content": "const express = require('express');\nconst router = express.Router();\n\nrouter.get('/ping', (req, res) => {\n  res.status(200).send('OK');\n});\n\nmodule.exports = router;"
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": "users.js",
          "path": "/routes/users.js",
          "content": "const express = require('express');\nconst router = express.Router();\nconst User = require('../models/User');\n\nrouter.get('/test-user', async (req, res) => {\n  try {\n    const foundUser = await User.findOne({ username: 'testuser' });\n    if(!foundUser) {\n      const dummyUser = new User({\n        username: 'testuser',\n        email: 'testuser@example.com',\n        password: 'password'\n      });\n      await dummyUser.save();\n      res.status(201).json(dummyUser);\n    } else {\n      res.status(200).json(foundUser);\n    }\n  } catch (error) {\n    res.status(500).send(error);\n  }\n});\n\nmodule.exports = router;"
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "index.js",
          "path": "/index.js",
          "code_change_description": "Add user routes to the server.\nBelow the existing route inclusion, add:\napp.use('/users', require('./routes/users'));"
        }
      }
    ]
  }
}