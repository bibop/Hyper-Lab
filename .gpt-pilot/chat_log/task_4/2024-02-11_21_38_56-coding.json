{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "save_file",
                    "modify_file",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "save_file": {
                  "type": "object",
                  "description": "A file that needs to be created or file that needs to be completely replaced. This should be used for new files.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be created or replaced."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file (with the file name) that needs to be created or replaced."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. Remember, you MUST NOT omit any of the content that should go into this file."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "modify_file": {
                  "type": "object",
                  "description": "A file that should be modified. This should only be used for existing files.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the existing file that needs to be updated."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be updated."
                    },
                    "code_change_description": {
                      "type": "string",
                      "description": "Detailed description, with code snippets and any relevant context/explanation, of the changes that the developer should do."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "code_change_description"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "save_file",
        "save_file": {
          "name": "AgentService.js",
          "path": "/services/AgentService.js",
          "content": "const Agent = require('../models/Agent');\n\nclass AgentService {\n  async createAgent(projectId, name, role) {\n    let agent = new Agent({ projectId, name, role });\n    agent = await agent.save();\n    return agent;\n  }\n}\n\nmodule.exports = new AgentService();"
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "projectController.js",
          "path": "/controllers/projectController.js",
          "code_change_description": "Import the AgentService at the top of the projectController.js file:\nconst AgentService = require('../services/AgentService');\n\nIn the addAgentToProject function, replace the logic that creates a new Agent instance with a call to the AgentService's createAgent method:\n\nlet agent = await AgentService.createAgent(projectId, name, role);"
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": "seedTestUser.js",
          "path": "/scripts/seedTestUser.js",
          "content": "const User = require('../models/User');\nconst bcrypt = require('bcryptjs');\nconst connectDB = require('../config/database');\n\n(async function createTestUser() {\n  await connectDB();\n\n  try {\n    let user = await User.findOne({ email: 'user@example.com' });\n    if (user) {\n      console.log('Test user already exists');\n      return;\n    }\n    const hashedPassword = await bcrypt.hash('password123', 10);\n    \n    user = new User({\n      username: 'testuser',\n      email: 'user@example.com',\n      password: hashedPassword,\n    });\n\n    await user.save();\n    console.log('Test user created successfully');\n  } catch (error) {\n    console.log('Error creating test user:', error);\n  }\n})();"
        }
      },
      {
        "type": "command",
        "command": {
          "command": "node scripts/seedTestUser.js",
          "timeout": 10000
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "authController.js",
          "path": "/controllers/authController.js",
          "code_change_description": "In the loginUser function of authController.js, add logs directly before the user search and before comparing the password to assist with debugging the 'Invalid Credentials' issue:\n\nconsole.log(`User not found for email: ${email}`); // Insert this log after the user search if-condition\n\nconsole.log(`Password check starts for user: ${user.username}`); // Insert this log right before the bcrypt.compare call"
        }
      }
    ]
  }
}