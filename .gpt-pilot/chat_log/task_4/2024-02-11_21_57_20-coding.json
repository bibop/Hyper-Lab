{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "save_file",
                    "modify_file",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "save_file": {
                  "type": "object",
                  "description": "A file that needs to be created or file that needs to be completely replaced. This should be used for new files.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be created or replaced."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file (with the file name) that needs to be created or replaced."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. Remember, you MUST NOT omit any of the content that should go into this file."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "modify_file": {
                  "type": "object",
                  "description": "A file that should be modified. This should only be used for existing files.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the existing file that needs to be updated."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be updated."
                    },
                    "code_change_description": {
                      "type": "string",
                      "description": "Detailed description, with code snippets and any relevant context/explanation, of the changes that the developer should do."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "code_change_description"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "modify_file",
        "modify_file": {
          "name": "Project.js",
          "path": "/models/Project.js",
          "code_change_description": "Add a new method `addAgent` to the `ProjectSchema` to handle adding new agents while ensuring the count does not exceed eight.\n\nProjectSchema.methods.addAgent = async function(agentId) {\n  if (this.agents.length >= 8) {\n    throw new Error('Maximum number of agents already reached.');\n  }\n  this.agents.push(agentId);\n  await this.save();\n};\n"
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "projectController.js",
          "path": "/controllers/projectController.js",
          "code_change_description": "In the 'createProject' method, add logic to create default agents for a new project by invoking `AgentService.createDefaultAgents(project._id, roles)`.\n\nWithin the 'try' block, after saving the project:\n\nconst roles = ['boss', 'critic']; // Define other default roles as necessary\nawait AgentService.createDefaultAgents(project._id, roles);"
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "projectController.js",
          "path": "/controllers/projectController.js",
          "code_change_description": "Modify the `addAgentToProject` function to use the 'addAgent' method from the 'Project' model to add new agents to the project.\n\nReplace the following lines after creating new agents:\n\nproject.agents.push(...newAgents.map(agent => agent._id));\nawait project.save();\n\nwith a loop that adds agents using the new Project method:\n\nconst newAgentsIds = newAgents.map(agent => agent._id);\nfor (const agentId of newAgentsIds) {\n  await project.addAgent(agentId);\n}"
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "AgentService.js",
          "path": "/services/AgentService.js",
          "code_change_description": "Add a new function to `AgentService` to create default agents with predefined roles.\n\nAdd the following method to the 'AgentService' class:\n\nasync createDefaultAgents(projectId, roles) {\n  const agents = [];\n  for (const role of roles) {\n    const name = `Agent ${role.charAt(0).toUpperCase() + role.slice(1)}`; // Basic formatting for agent name\n    const agent = await this.createAgent(projectId, name, role);\n    agents.push(agent);\n  }\n  return agents;\n}\n"
        }
      }
    ]
  }
}