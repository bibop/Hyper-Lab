{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "save_file",
                    "modify_file",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "save_file": {
                  "type": "object",
                  "description": "A file that needs to be created or file that needs to be completely replaced. This should be used for new files.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be created or replaced."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file (with the file name) that needs to be created or replaced."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. Remember, you MUST NOT omit any of the content that should go into this file."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "modify_file": {
                  "type": "object",
                  "description": "A file that should be modified. This should only be used for existing files.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the existing file that needs to be updated."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be updated."
                    },
                    "code_change_description": {
                      "type": "string",
                      "description": "Detailed description, with code snippets and any relevant context/explanation, of the changes that the developer should do."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "code_change_description"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "modify_file",
        "modify_file": {
          "name": "jwtAuthMiddleware.js",
          "path": "/middleware/jwtAuthMiddleware.js",
          "code_change_description": "Ensure jwtAuthMiddleware populates req.user with the authenticated user's data. Find the section where the decoded token is verified and update it to populate req.user with an object that includes the user's id:\n\nUser.findById(decoded.user.id)\n  .then((user) => {\n    if (!user) {\n      return res.status(401).json({ msg: 'User not found' });\n    }\n    req.user = { id: user._id }; // Ensure `req.user` is an object with an `id`.\n    next();\n  })\n  // ... rest of the code"
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "projectController.js",
          "path": "/controllers/projectController.js",
          "code_change_description": "Add error handling to the createProject method to provide better feedback when errors occur. Surround the existing implementation with a try-catch block:\n\nexports.createProject = async (req, res) => {\n  try {\n    // existing code...\n  } catch (err) {\n    console.error(err); // Log the detailed error for debugging purposes\n    res.status(500).send({ msg: 'Server Error', error: err.message });\n  }\n};"
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "projectRoutes.js",
          "path": "/routes/projectRoutes.js",
          "code_change_description": "Use jwtAuthMiddleware for the '/projects/create' route:\n\nconst jwtAuthMiddleware = require('../middleware/jwtAuthMiddleware');\n\nrouter.post('/create', jwtAuthMiddleware, projectController.createProject);"
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "database.js",
          "path": "/config/database.js",
          "code_change_description": "Update the connectDB function to handle database connection errors better. Add a console.error statement before exiting:\n\nconst connectDB = async () => {\n  try {\n    // existing connection code...\n  } catch (err) {\n    console.error(`Database connection error: ${err.message}`);\n    process.exit(1);\n  }\n};"
        }
      },
      {
        "type": "command",
        "command": {
          "command": "echo \"Ensure that the .env file contains the correct PORT, MONGO_URI and JWT_SECRET values.\"",
          "timeout": 3000
        }
      },
      {
        "type": "command",
        "command": {
          "command": "npm restart",
          "timeout": 10000,
          "success_message": "Server restarted successfully"
        }
      }
    ]
  }
}