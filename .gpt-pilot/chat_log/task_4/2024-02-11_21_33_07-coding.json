{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "save_file",
                    "modify_file",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "save_file": {
                  "type": "object",
                  "description": "A file that needs to be created or file that needs to be completely replaced. This should be used for new files.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be created or replaced."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file (with the file name) that needs to be created or replaced."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. Remember, you MUST NOT omit any of the content that should go into this file."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "modify_file": {
                  "type": "object",
                  "description": "A file that should be modified. This should only be used for existing files.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the existing file that needs to be updated."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be updated."
                    },
                    "code_change_description": {
                      "type": "string",
                      "description": "Detailed description, with code snippets and any relevant context/explanation, of the changes that the developer should do."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "code_change_description"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "save_file",
        "save_file": {
          "name": "Agent.js",
          "path": "/models/Agent.js",
          "content": "const mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst AgentSchema = new Schema({\n  projectId: {\n    type: Schema.Types.ObjectId,\n    ref: 'Project',\n    required: true\n  },\n  name: {\n    type: String,\n    required: true\n  },\n  role: {\n    type: String,\n    enum: ['boss', 'critic', 'worker'],\n    required: true\n  },\n  image: {\n    type: String,\n    default: ''\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n});\n\nconst Agent = mongoose.model('Agent', AgentSchema);\nmodule.exports = Agent;"
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": "Project.js",
          "path": "/models/Project.js",
          "content": "const mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst ProjectSchema = new Schema({\n  name: {\n    type: String,\n    required: true\n  },\n  user: {\n    type: Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  agents: [{\n    type: Schema.Types.ObjectId,\n    ref: 'Agent'\n  }],\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n});\n\nconst Project = mongoose.model('Project', ProjectSchema);\nmodule.exports = Project;"
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": "projectRoutes.js",
          "path": "/routes/projectRoutes.js",
          "content": "const express = require('express');\nconst router = express.Router();\nconst projectController = require('../controllers/projectController');\n\nrouter.post('/create', projectController.createProject);\nrouter.post('/:projectId/agent', projectController.addAgentToProject);\n\nmodule.exports = router;"
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "index.js",
          "path": "/routes/index.js",
          "code_change_description": "Import the newly created projectRoutes and add it to the Express app.\n\nAdd the following lines after other route imports:\nconst projectRoutes = require('./projectRoutes');\n\nInside the exported function, below the existing app.use(...) calls, add:\napp.use('/projects', projectRoutes);"
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": "projectController.js",
          "path": "/controllers/projectController.js",
          "content": "const Project = require('../models/Project');\nconst Agent = require('../models/Agent');\n\nexports.createProject = async (req, res) => {\n  try {\n    const { name } = req.body;\n\n    let project = new Project({ name, user: req.user._id });\n    project = await project.save();\n\n    res.status(201).json({ project });\n  } catch (err) {\n    res.status(500).send('Server Error');\n  }\n};\n\nexports.addAgentToProject = async (req, res) => {\n  try {\n    const { projectId } = req.params;\n    const { name, role } = req.body;\n\n    let project = await Project.findById(projectId);\n    if (!project) {\n      return res.status(404).json({ msg: 'Project not found' });\n    }\n\n    if (project.agents.length >= 8) {\n      return res.status(400).json({ msg: 'Project already has the maximum number of agents' });\n    }\n\n    let agent = new Agent({ name, role, projectId });\n    agent = await agent.save();\n    \n    project.agents.push(agent._id);\n    await project.save();\n\n    res.status(201).json({ agent });\n  } catch (err) {\n    res.status(500).send('Server Error');\n  }\n};"
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": "auth.js",
          "path": "/middleware/auth.js",
          "content": "const jwt = require('jsonwebtoken');\n\nmodule.exports = (req, res, next) => {\n  // Your existing jwt authentication middleware code\n  // Make sure it attaches the authenticated user to 'req.user'\n};"
        }
      },
      {
        "type": "command",
        "command": {
          "command": "npm install mongoose express",
          "timeout": 60000
        }
      },
      {
        "type": "command",
        "command": {
          "command": "npm start",
          "timeout": 10000,
          "success_message": "Server is running on port",
          "command_id": "start_server"
        }
      }
    ]
  }
}