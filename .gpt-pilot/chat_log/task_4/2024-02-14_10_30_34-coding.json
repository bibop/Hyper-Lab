{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "save_file",
                    "modify_file",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "save_file": {
                  "type": "object",
                  "description": "A file that needs to be created or file that needs to be completely replaced. This should be used for new files.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be created or replaced."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file (with the file name) that needs to be created or replaced."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. Remember, you MUST NOT omit any of the content that should go into this file."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "modify_file": {
                  "type": "object",
                  "description": "A file that should be modified. This should only be used for existing files.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the existing file that needs to be updated."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be updated."
                    },
                    "code_change_description": {
                      "type": "string",
                      "description": "Detailed description, with code snippets and any relevant context/explanation, of the changes that the developer should do."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "code_change_description"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "save_file",
        "save_file": {
          "name": "agentValidator.js",
          "path": "/validators/agentValidator.js",
          "content": "const { body } = require('express-validator');\n\nexports.createAgentsValidator = [\n  body('agentDetails').isArray({ max: 8 }).withMessage('Cannot have more than 8 agents'),\n  body('agentDetails.*.name').not().isEmpty().withMessage('Agent name is required'),\n  body('agentDetails.*.role').not().isEmpty().withMessage('Agent role is required').isIn(['boss', 'critic', 'worker', 'spy', 'messenger', 'guard', 'scout', 'archivist']),\n];"
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "agentController.js",
          "path": "/controllers/agentController.js",
          "code_change_description": "Replace the existing createAgentsForProject function with:\n\nconst Agent = require('../models/Agent');\nconst Project = require('../models/Project');\nconst { validationResult } = require('express-validator');\n\nexports.createAgentsForProject = async (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n  \n  try {\n    const { projectId, agentDetails } = req.body;\n    const project = await Project.findById(projectId);\n    if (!project) return res.status(404).json({ msg: 'Project not found' });\n\n    const agents = (await Promise.all(agentDetails.slice(0, 8).map(async details => {\n      const { name, role } = details;\n      const newAgent = new Agent({ name, role, projectId: project._id });\n      return newAgent.save();\n    }))).map(savedAgent => savedAgent._id);\n\n    project.agents = agents;\n    await project.save();\n\n    res.status(201).json({ agents });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n};"
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "agents.js",
          "path": "/routes/agents.js",
          "code_change_description": "Require the new agentValidator at the top of the file:\nconst agentValidator = require('../validators/agentValidator');\n\nThen update the POST route for '/:projectId' to include the validation middleware:\n\nrouter.post('/:projectId',\n  auth,\n  agentValidator.createAgentsValidator,\n  agentController.createAgentsForProject\n);"
        }
      }
    ]
  }
}