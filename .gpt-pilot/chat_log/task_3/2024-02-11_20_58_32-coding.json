{
  "endpoint": "OPENAI",
  "model": "gpt-4-1106-preview",
  "functions": [
    {
      "name": "parse_development_task",
      "description": "Breaks down the development task into smaller steps that need to be done to implement the entire task.",
      "parameters": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "List of smaller development steps that need to be done to complete the entire task.",
            "items": {
              "type": "object",
              "description": "A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "command",
                    "save_file",
                    "modify_file",
                    "human_intervention"
                  ],
                  "description": "Type of the development step that needs to be done to complete the entire task."
                },
                "command": {
                  "type": "object",
                  "description": "Command that needs to be run to complete the current task. This should be used only if the task is of a type \"command\".",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "A single command that needs to be executed."
                    },
                    "timeout": {
                      "type": "number",
                      "description": "Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"
                    },
                    "success_message": {
                      "type": "string",
                      "description": "A message to look for in the output of the command to determine if successful or not."
                    },
                    "command_id": {
                      "type": "string",
                      "description": "If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later."
                    }
                  },
                  "required": [
                    "command",
                    "timeout"
                  ]
                },
                "save_file": {
                  "type": "object",
                  "description": "A file that needs to be created or file that needs to be completely replaced. This should be used for new files.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the file that needs to be created or replaced."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file (with the file name) that needs to be created or replaced."
                    },
                    "content": {
                      "type": "string",
                      "description": "Full content of the file that needs to be implemented. Remember, you MUST NOT omit any of the content that should go into this file."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "content"
                  ]
                },
                "modify_file": {
                  "type": "object",
                  "description": "A file that should be modified. This should only be used for existing files.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the existing file that needs to be updated."
                    },
                    "path": {
                      "type": "string",
                      "description": "Full path of the file with the file name that needs to be updated."
                    },
                    "code_change_description": {
                      "type": "string",
                      "description": "Detailed description, with code snippets and any relevant context/explanation, of the changes that the developer should do."
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "code_change_description"
                  ]
                },
                "human_intervention_description": {
                  "type": "string",
                  "description": "Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type \"human_intervention\"."
                }
              },
              "required": [
                "type"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      }
    }
  ],
  "response": {
    "tasks": [
      {
        "type": "modify_file",
        "modify_file": {
          "name": "userController.js",
          "path": "/controller/userController.js",
          "code_change_description": "Update loginUser function to handle asynchronous code and storing refresh tokens. Replace the existing loginUser export with:\n\nexports.loginUser = async (req, res, next) => {\n  passport.authenticate('local', { session: false }, async (err, user, info) => {\n    if (err || !user) {\n      return res.status(400).json({\n        message: info ? info.message : 'Login failed',\n        user: user\n      });\n    }\n\n    req.login(user, { session: false }, async (err) => {\n      if (err) return res.send(err);\n\n      const payload = {\n        user: { id: user.id }\n      };\n\n      const accessToken = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '1h' });\n      const refreshToken = jwt.sign(payload, process.env.JWT_REFRESH_SECRET, { expiresIn: '7d' });\n      user.refreshTokens.push({ token: refreshToken });\n      try {\n        await user.save();\n        const userInfo = {\n          id: user._id,\n          username: user.username,\n          email: user.email\n        };\n        return res.json({ accessToken, refreshToken, user: userInfo });\n      } catch (saveError) {\n        return res.status(500).json({ message: 'Unable to save user.', error: saveError.message });\n      }\n    });\n  })(req, res, next);\n};\n"
        }
      },
      {
        "type": "save_file",
        "save_file": {
          "name": "auth.js",
          "path": "/routes/auth.js",
          "content": "const express = require('express');\nconst router = express.Router();\nconst { check, validationResult } = require('express-validator');\nconst jwt = require('jsonwebtoken');\nconst User = require('../models/User');\n\n// Define other routes...\n\nrouter.post('/refresh-token', async (req, res) => {\n  const { refreshToken } = req.body;\n  if (!refreshToken) {\n    return res.status(401).json({ message: 'Refresh token is required' });\n  }\n\n  try {\n    const payload = jwt.verify(refreshToken, process.env.JWT_REFRESH_SECRET);\n    const user = await User.findById(payload.user.id);\n    if (!user) {\n      return res.status(401).json({ message: 'User not found' });\n    }\n    if (!user.refreshTokens.some(tokenData => tokenData.token === refreshToken)) {\n      return res.status(401).json({ message: 'Refresh token does not match' });\n    }\n\n    const newAccessToken = jwt.sign({ user: { id: user.id } }, process.env.JWT_SECRET, { expiresIn: '1h' });\n    return res.json({ accessToken: newAccessToken });\n  } catch (error) {\n    return res.status(401).json({ message: 'Invalid refresh token', error: error.message });\n  }\n});\n\nmodule.exports = router;\n"
        }
      },
      {
        "type": "modify_file",
        "modify_file": {
          "name": "index.js",
          "path": "/routes/index.js",
          "code_change_description": "Register the new refresh-token route within the existing module.exports function. Add the following line inside the function:\napp.use('/auth', require('./auth'));\n"
        }
      }
    ]
  }
}